//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./parser/grammer/RcpDoc.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class RcpDocParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, RCP_PARAM_NAME=4, PARAM_TYPE_LABEL=5, SUPPORTED_LABEL=6, 
		AND_OR=7, TYPES_JSON_LABEL=8, SUPPORTED_VALUE=9, JSON_NUMBER=10, JSON_CONST=11, 
		JSON_STRING=12, IDENTIFIER=13, PARAM_TYPE_EXTRA=14, WS=15;
	public const int
		RULE_rcpParamBlock = 0, RULE_rcpParamName = 1, RULE_rcpParamTypeBlock = 2, 
		RULE_typeValue = 3, RULE_supportedObjectValues = 4, RULE_supportedObjectValue = 5, 
		RULE_paramDesc = 6, RULE_typesJsonBlock = 7, RULE_jsonKeyValuePair = 8, 
		RULE_jsonValue = 9, RULE_jsonObject = 10;
	public static readonly string[] ruleNames = {
		"rcpParamBlock", "rcpParamName", "rcpParamTypeBlock", "typeValue", "supportedObjectValues", 
		"supportedObjectValue", "paramDesc", "typesJsonBlock", "jsonKeyValuePair", 
		"jsonValue", "jsonObject"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "'}'", null, "'Type:'", "'JSON Supported Objects:'", 
		"'and/or'", "'TYPES'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "RCP_PARAM_NAME", "PARAM_TYPE_LABEL", "SUPPORTED_LABEL", 
		"AND_OR", "TYPES_JSON_LABEL", "SUPPORTED_VALUE", "JSON_NUMBER", "JSON_CONST", 
		"JSON_STRING", "IDENTIFIER", "PARAM_TYPE_EXTRA", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RcpDoc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RcpDocParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RcpDocParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RcpDocParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RcpParamBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RcpParamNameContext rcpParamName() {
			return GetRuleContext<RcpParamNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RcpParamTypeBlockContext rcpParamTypeBlock() {
			return GetRuleContext<RcpParamTypeBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamDescContext paramDesc() {
			return GetRuleContext<ParamDescContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportedObjectValuesContext supportedObjectValues() {
			return GetRuleContext<SupportedObjectValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypesJsonBlockContext typesJsonBlock() {
			return GetRuleContext<TypesJsonBlockContext>(0);
		}
		public RcpParamBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rcpParamBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterRcpParamBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitRcpParamBlock(this);
		}
	}

	[RuleVersion(0)]
	public RcpParamBlockContext rcpParamBlock() {
		RcpParamBlockContext _localctx = new RcpParamBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_rcpParamBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			rcpParamName();
			State = 23;
			rcpParamTypeBlock();
			State = 24;
			paramDesc();
			State = 25;
			supportedObjectValues();
			State = 27;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 26;
				typesJsonBlock();
				}
				break;
			}
			State = 32;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << RCP_PARAM_NAME) | (1L << PARAM_TYPE_LABEL) | (1L << SUPPORTED_LABEL) | (1L << AND_OR) | (1L << TYPES_JSON_LABEL) | (1L << SUPPORTED_VALUE) | (1L << JSON_NUMBER) | (1L << JSON_CONST) | (1L << JSON_STRING) | (1L << IDENTIFIER) | (1L << PARAM_TYPE_EXTRA) | (1L << WS))) != 0)) {
				{
				{
				State = 29;
				MatchWildcard();
				}
				}
				State = 34;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RcpParamNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RCP_PARAM_NAME() { return GetToken(RcpDocParser.RCP_PARAM_NAME, 0); }
		public RcpParamNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rcpParamName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterRcpParamName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitRcpParamName(this);
		}
	}

	[RuleVersion(0)]
	public RcpParamNameContext rcpParamName() {
		RcpParamNameContext _localctx = new RcpParamNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_rcpParamName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(RCP_PARAM_NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RcpParamTypeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_TYPE_LABEL() { return GetToken(RcpDocParser.PARAM_TYPE_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeValueContext typeValue() {
			return GetRuleContext<TypeValueContext>(0);
		}
		public RcpParamTypeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rcpParamTypeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterRcpParamTypeBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitRcpParamTypeBlock(this);
		}
	}

	[RuleVersion(0)]
	public RcpParamTypeBlockContext rcpParamTypeBlock() {
		RcpParamTypeBlockContext _localctx = new RcpParamTypeBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_rcpParamTypeBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			Match(PARAM_TYPE_LABEL);
			State = 38;
			typeValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RcpDocParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_TYPE_EXTRA() { return GetToken(RcpDocParser.PARAM_TYPE_EXTRA, 0); }
		public TypeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterTypeValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitTypeValue(this);
		}
	}

	[RuleVersion(0)]
	public TypeValueContext typeValue() {
		TypeValueContext _localctx = new TypeValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40;
			Match(IDENTIFIER);
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 41;
				Match(PARAM_TYPE_EXTRA);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportedObjectValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupportedObjectValueContext[] supportedObjectValue() {
			return GetRuleContexts<SupportedObjectValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportedObjectValueContext supportedObjectValue(int i) {
			return GetRuleContext<SupportedObjectValueContext>(i);
		}
		public SupportedObjectValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportedObjectValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterSupportedObjectValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitSupportedObjectValues(this);
		}
	}

	[RuleVersion(0)]
	public SupportedObjectValuesContext supportedObjectValues() {
		SupportedObjectValuesContext _localctx = new SupportedObjectValuesContext(Context, State);
		EnterRule(_localctx, 8, RULE_supportedObjectValues);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 44;
					supportedObjectValue();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportedObjectValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORTED_VALUE() { return GetToken(RcpDocParser.SUPPORTED_VALUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_OR() { return GetToken(RcpDocParser.AND_OR, 0); }
		public SupportedObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportedObjectValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterSupportedObjectValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitSupportedObjectValue(this);
		}
	}

	[RuleVersion(0)]
	public SupportedObjectValueContext supportedObjectValue() {
		SupportedObjectValueContext _localctx = new SupportedObjectValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_supportedObjectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49;
			_la = TokenStream.LA(1);
			if ( !(_la==AND_OR || _la==SUPPORTED_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamDescContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPPORTED_LABEL() { return GetToken(RcpDocParser.SUPPORTED_LABEL, 0); }
		public ParamDescContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramDesc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterParamDesc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitParamDesc(this);
		}
	}

	[RuleVersion(0)]
	public ParamDescContext paramDesc() {
		ParamDescContext _localctx = new ParamDescContext(Context, State);
		EnterRule(_localctx, 12, RULE_paramDesc);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 51;
					MatchWildcard();
					}
					} 
				}
				State = 56;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			State = 57;
			Match(SUPPORTED_LABEL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypesJsonBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_JSON_LABEL() { return GetToken(RcpDocParser.TYPES_JSON_LABEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonKeyValuePairContext[] jsonKeyValuePair() {
			return GetRuleContexts<JsonKeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonKeyValuePairContext jsonKeyValuePair(int i) {
			return GetRuleContext<JsonKeyValuePairContext>(i);
		}
		public TypesJsonBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typesJsonBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterTypesJsonBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitTypesJsonBlock(this);
		}
	}

	[RuleVersion(0)]
	public TypesJsonBlockContext typesJsonBlock() {
		TypesJsonBlockContext _localctx = new TypesJsonBlockContext(Context, State);
		EnterRule(_localctx, 14, RULE_typesJsonBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(TYPES_JSON_LABEL);
			State = 61;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 60;
					jsonKeyValuePair();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 63;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonKeyValuePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STRING() { return GetToken(RcpDocParser.JSON_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonValueContext jsonValue() {
			return GetRuleContext<JsonValueContext>(0);
		}
		public JsonKeyValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonKeyValuePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterJsonKeyValuePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitJsonKeyValuePair(this);
		}
	}

	[RuleVersion(0)]
	public JsonKeyValuePairContext jsonKeyValuePair() {
		JsonKeyValuePairContext _localctx = new JsonKeyValuePairContext(Context, State);
		EnterRule(_localctx, 16, RULE_jsonKeyValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(JSON_STRING);
			State = 66;
			Match(T__0);
			State = 67;
			jsonValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjectContext jsonObject() {
			return GetRuleContext<JsonObjectContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_NUMBER() { return GetToken(RcpDocParser.JSON_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_CONST() { return GetToken(RcpDocParser.JSON_CONST, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_STRING() { return GetToken(RcpDocParser.JSON_STRING, 0); }
		public JsonValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterJsonValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitJsonValue(this);
		}
	}

	[RuleVersion(0)]
	public JsonValueContext jsonValue() {
		JsonValueContext _localctx = new JsonValueContext(Context, State);
		EnterRule(_localctx, 18, RULE_jsonValue);
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				jsonObject();
				}
				break;
			case JSON_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70;
				Match(JSON_NUMBER);
				}
				break;
			case JSON_CONST:
				EnterOuterAlt(_localctx, 3);
				{
				State = 71;
				Match(JSON_CONST);
				}
				break;
			case JSON_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 72;
				Match(JSON_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjectContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonKeyValuePairContext[] jsonKeyValuePair() {
			return GetRuleContexts<JsonKeyValuePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonKeyValuePairContext jsonKeyValuePair(int i) {
			return GetRuleContext<JsonKeyValuePairContext>(i);
		}
		public JsonObjectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObject; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.EnterJsonObject(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRcpDocListener typedListener = listener as IRcpDocListener;
			if (typedListener != null) typedListener.ExitJsonObject(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjectContext jsonObject() {
		JsonObjectContext _localctx = new JsonObjectContext(Context, State);
		EnterRule(_localctx, 20, RULE_jsonObject);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(T__1);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 76;
				jsonKeyValuePair();
				}
				}
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==JSON_STRING );
			State = 81;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', 'V', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x1E', '\n', '\x2', '\x3', '\x2', 
		'\a', '\x2', '!', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '$', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '-', '\n', '\x5', '\x3', '\x6', 
		'\x6', '\x6', '\x30', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x31', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\a', '\b', '\x37', '\n', '\b', 
		'\f', '\b', '\xE', '\b', ':', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x6', '\t', '@', '\n', '\t', '\r', '\t', '\xE', '\t', 
		'\x41', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'L', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x6', '\f', 'P', '\n', '\f', '\r', '\f', '\xE', '\f', 
		'Q', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\x38', '\x2', '\r', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x3', '\x4', '\x2', '\t', '\t', '\v', '\v', '\x2', 'T', 
		'\x2', '\x18', '\x3', '\x2', '\x2', '\x2', '\x4', '%', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\'', '\x3', '\x2', '\x2', '\x2', '\b', '*', '\x3', '\x2', 
		'\x2', '\x2', '\n', '/', '\x3', '\x2', '\x2', '\x2', '\f', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x38', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x12', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x14', 'K', '\x3', '\x2', '\x2', '\x2', '\x16', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x19', '\x5', '\x4', '\x3', '\x2', '\x19', '\x1A', 
		'\x5', '\x6', '\x4', '\x2', '\x1A', '\x1B', '\x5', '\xE', '\b', '\x2', 
		'\x1B', '\x1D', '\x5', '\n', '\x6', '\x2', '\x1C', '\x1E', '\x5', '\x10', 
		'\t', '\x2', '\x1D', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', '!', '\v', '\x2', '\x2', '\x2', ' ', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', '#', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', '\x2', '%', '&', 
		'\a', '\x6', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', '\x2', '\'', 
		'(', '\a', '\a', '\x2', '\x2', '(', ')', '\x5', '\b', '\x5', '\x2', ')', 
		'\a', '\x3', '\x2', '\x2', '\x2', '*', ',', '\a', '\xF', '\x2', '\x2', 
		'+', '-', '\a', '\x10', '\x2', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', 
		',', '-', '\x3', '\x2', '\x2', '\x2', '-', '\t', '\x3', '\x2', '\x2', 
		'\x2', '.', '\x30', '\x5', '\f', '\a', '\x2', '/', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\v', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\t', '\x2', 
		'\x2', '\x2', '\x34', '\r', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', 
		'\v', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x37', ':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ';', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', 
		'<', '\a', '\b', '\x2', '\x2', '<', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\a', '\n', '\x2', '\x2', '>', '@', '\x5', '\x12', '\n', '\x2', 
		'?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x11', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'\x44', '\a', '\xE', '\x2', '\x2', '\x44', '\x45', '\a', '\x3', '\x2', 
		'\x2', '\x45', '\x46', '\x5', '\x14', '\v', '\x2', '\x46', '\x13', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'L', '\x5', '\x16', '\f', '\x2', 'H', 'L', '\a', 
		'\f', '\x2', '\x2', 'I', 'L', '\a', '\r', '\x2', '\x2', 'J', 'L', '\a', 
		'\xE', '\x2', '\x2', 'K', 'G', '\x3', '\x2', '\x2', '\x2', 'K', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x15', '\x3', '\x2', '\x2', '\x2', 'M', 'O', 
		'\a', '\x4', '\x2', '\x2', 'N', 'P', '\x5', '\x12', '\n', '\x2', 'O', 
		'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 
		'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x5', '\x2', '\x2', 
		'T', '\x17', '\x3', '\x2', '\x2', '\x2', '\n', '\x1D', '\"', ',', '\x31', 
		'\x38', '\x41', 'K', 'Q',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
